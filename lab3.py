# print ("TASK 1")
# try:
#     N = int(input("n: "))
#     i = 2
#     while i <= N:
#         print(i)
#         i += 2
#         print(
#             "В этом коде мы используем функцию input() для получения целого положительного числа N от пользователя. Затем мы инициализируем переменную i равной 2 и используем цикл while, чтобы печатать все четные числа от 1 до N. В каждой итерации цикла мы печатаем значение переменной i и увеличиваем ее на 2.")
# except:
#   print("error")

# print("TASK 2")

# fac=int (input("facterial"))
# a=0
# b=1
# while a<fac:
#  b*=fac
#  fac-=1
#  print(b)
# print("input() для получения целого числа fac от пользователя. Затем мы инициализируем переменные a и b равными 0 и 1 соответственно.Затем мы используем цикл while, чтобы вычислить факториал числа fac. В каждой итерации цикла мы умножаем значение переменной b на значение переменной fac, а затем уменьшаем значение переменной fac на 1. Мы продолжаем выполнять итерации до тех пор, пока значение переменной a не станет больше или равно значению переменной fac.В конце каждой итерации мы печатаем значение переменной b.")

# print("TASK 3")

#while True:
#    number = int(input("Введите число: "))
#    if number == 42:
#        break
#print("Программа завершена")
#print("while, чтобы продолжать запрашивать у пользователя числа до тех пор, пока он не введет число 42. В каждой итерации цикла мы используем условный оператор if для проверки, равно ли значение переменной number числу 42. Если это так, мы используем оператор break, чтобы выйти из цикла. В противном случае программа продолжает запрашивать у пользователя числа.После того, как пользователь вводит число 42, программа выводит сообщение “Программа завершена”.")
# print("TASK 4")
#
# strs=input("String: ")
# print (len(strs))
# print("функцию len() для определения длины этой строки")
# # print ("TASK 5")
# user_input = input(" number: ")
# sum_of_digits = 0
# for char in user_input:
#     if char.isdigit():
#         sum_of_digits += int(char)
# print("Sum of digits:", sum_of_digits)
# print("sum_of_digits равной 0.Затем мы используем цикл for, чтобы перебрать каждый символ в строке, которую ввел пользователь. В каждой итерации цикла мы используем условный оператор if для проверки, является ли текущий символ цифрой. Если это так, мы преобразуем символ в целое число и добавляем его к переменной sum_of_digits.")
# # print ("TASK 6")
# N = int(input(" N: "))
# current = 1
# previous = 0
# count = 0
#
# while count < N:
#
#         print(current)
#         next = current + previous
#         previous = current
#         current = next
#
#         count += 1
# print("получения целого числа N от пользователя. Затем мы инициализируем переменные current, previous и count равными 1, 0 и 0 соответственно.Затем мы используем цикл while, чтобы печатать первые N чисел Фибоначчи. В каждой итерации цикла мы печатаем значение переменной current, вычисляем следующее число Фибоначчи, обновляем значения переменных previous, current и count")
# print("TASK 7")
# str=input("string: ")
# result=str[::-1]
# print(result)
# print("мы используем срез [::-1], чтобы перевернуть строку")
# # print("TASK 8")
# sum = 0
# while True:
#     num = int(input("num "))
#     if num % 2 == 0:
#         continue
#     sum += num
#     print("Сумма нечетных чисел:", sum)
#
# print(" while, чтобы продолжать запрашивать у пользователя числа до тех пор, пока он не введет число 42. В каждой итерации цикла мы используем условный оператор if для проверки, равно ли значение переменной number числу 42. Если это так, мы используем оператор break, чтобы выйти из цикла. В противном случае программа продолжает запрашивать у пользователя числа.")
# print("TASK 9")
# import random
#
# number = random.randint(1, 100)
#
# while True:
#     guess = int(input("Guess the number between 1 and 100: "))
#     if guess < number:
#         print("Too small!")
#     elif guess > number:
#         print("Too large!")
#     else:
#         print("Congratulations! You guessed the number!")
#         break
# print(" модуль random для генерации случайного целого числа от 1 до 100. Затем мы используем цикл while, чтобы повторно попросить пользователя угадать число. Если предположение пользователя слишком мало, мы выводим “Слишком мало!” и запрашиваем еще одно предположение. Если предположение пользователя слишком велико, мы выводим “Слишком велико!” и запрашиваем еще одно предположение. Если предположение пользователя верно, мы печатаем “Поздравляем! Вы угадали число!” и выйдите из цикла, используя оператор break.")
# # print("TASK 10")
# str1=input("string: ")
# str2=str1[::-1]
# if(str1==str2):
#     print("polindrom")
# else:
#      print("its no polindrom")
# print("используем срез [::-1], чтобы перевернуть строку. Затем мы используем условный оператор if для проверки, равна ли исходная строка перевернутой строке. Если это так, мы выводим сообщение “polindrom”. В противном случае мы выводим сообщение “its no polindrom”.")
# # print("TASK 11")
# x=int(input("x"))
# y=int(input("y"))
# pow=1
# con=0
# while con<y:
#     pow=pow*x
#     con+=1
#     print(pow)
# print(" x и y от пользователя, pow равной 1 и переменную con равной 0.while, чтобы вычислить степень числа x. В каждой итерации цикла мы умножаем значение переменной pow на значение переменной x, а затем увеличиваем значение переменной con на 1. Мы продолжаем выполнять итерации до тех пор, пока значение переменной con не станет больше или равно значению переменной y.В конце каждой итерации мы печатаем значение переменной pow.")
# print("TASK 12")
# n = int(input("N: "))
# num = 2
# while num <= n:
#
#     is_prime = True
#     div = 2
#     while div * div <= num:
#         if num % div == 0:
#             is_prime = False
#             break
#
#         div = div + 1
#
#     if is_prime:
#         print(num)
#     num+=1
# print("N от пользователя, num равной 2. while, чтобы проверить каждое число от 2 до N. В каждой итерации цикла мы используем вложенный цикл while, чтобы проверить, является ли текущее число простым. Если текущее число делится на какое-либо число от 2 до квадратного корня из текущего числа без остатка, мы устанавливаем значение переменной is_prime равным False и выходим из вложенного цикла. Если текущее число является простым, мы печатаем его.В конце каждой итерации мы увеличиваем значение переменной num на 1.")
# print("TASK 13")
# str=input("str")
# print(str[::-1])
# print("[::-1], чтобы перевернуть строку. ")
# # print("TASK 14")
# n = int(input(" n: "))
# is_prime = True
#
# if n <= 1:
#     is_prime = False
#
# elif n > 3:
#
#     div = 2
#
#     while div * div <= n:
#
#         if n % div == 0:
#             is_prime = False
#
#             break
#
#         div = div + 1
#
#         if div == 2:
#             continue
#
#         div = div + 1
#
# if is_prime:
#     print( n)
# else:
#     print( n)
# print("is_prime равной True.Затем мы используем условный оператор if для проверки, является ли число n меньше или равным 1. Если это так, мы устанавливаем значение переменной is_prime равным False.Если число n больше 3, мы используем цикл while, чтобы проверить, является ли число n простым. В каждой итерации цикла мы используем условный оператор if для проверки, делится ли число n на какое-либо число от 2 до квадратного корня из числа n. Если это так, мы устанавливаем значение переменной is_prime равным False и выходим из цикла. Если число n является простым, мы выводим ег ")
# print("TASK 15")
# def caesar_cipher(string, shift):
#     result = ""
#     for char in string:
#         if char.isalpha():
#             if char.isupper():
#                 result += chr((ord(char) + shift - 65) % 26 + 65)
#             else:
#                 result += chr((ord(char) + shift - 97) % 26 + 97)
#         else:
#             result += char
#     return result
#
# string = input("Enter a string: ")
# shift = int(input("Enter the shift value: "))
#
# encrypted_string = caesar_cipher(string, shift)
#
# print("Encrypted string:", encrypted_string)
# print("используйте цикл for для перебора каждого символа в строке. Если символ является алфавитом, мы циклически сдвигаем его на указанное количество позиций. Если символ не является алфавитом, мы оставляем его без изменений. Наконец, мы возвращаем зашифрованную строку.Затем мы используем функцию input(), чтобы получить строку и значение сдвига от пользователя. Мы вызываем функцию caesar_cipher() с этими входными данными, чтобы получить зашифрованную строку. Наконец, мы используем функцию print() для отображения зашифрованной строки.")